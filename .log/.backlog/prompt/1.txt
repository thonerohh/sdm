fix error. presume it should have cached dictionary for answers or i was unexpectedly fone something wrong with pop() and customizing trimming output from unwanted empty unanswered objects

function example:
def ask_questions(pattern):
    for key, value in pattern.items():
        if key.startswith('@'):
            continue  # Skip keys that start with '@'
        if isinstance(value, dict):
            print(f"Please provide details for {key}:")
            pattern[key] = ask_questions(value)
        elif isinstance(value, list):
            # check if the list is not empty
            if len(value) > 0:
                if isinstance(value[0], dict):
                    # ask do you want to add this item
                    add_item = input(f"Do you want to add items to {key}? (yes/no): ").strip().lower()
                    if add_item == 'y' or add_item == 'yes':
                        while True:
                            print(f"Adding items to {key}.")
                            item = ask_questions(value[0].copy())
                            pattern[key].append(item)
                            add_more = input("Do you want to add another item? (yes/no): ").strip().lower()
                            if add_more != 'y' or add_more != 'yes':
                                # remove [0] item from the list
                                pattern[key].pop(0)
                                # print the list of items
                                print(f"{key}:")
                                for i, item in enumerate(pattern[key], 1):
                                    print(f"{i}. {item}")
                                # ask is it ok to keep the list
                                keep_list = input("Do you want to keep the list? (yes/no): ").strip().lower()
                                if keep_list != 'y' or keep_list != 'yes':
                                    # remove the list
                                    pattern.pop(key)
                                break
                    else:
                        # remove this key
                        pattern.pop(key)
                    
                else:
                    # make a list of options
                    print(f"Please select a {key} from the following options:")
                    for i, option in enumerate(pattern[key], 1):
                        if option == "":
                            print(f"{i}. Enter your own value")
                        else:
                            print(f"{i}. {option}")
                    # make a choice
                    choice = int(input("Select an option (number): ")) - 1
                    # check if pattern[choice] is not empty
                    if pattern[key][choice] != "":
                        pattern[key] = value[choice]
                    else:
                        # if empty, ask for input
                        pattern[key] = input(f"Please provide {key}: ").strip()
                    
            #  if list is empty ask until no answer
            else:
                print(f"Please provide values for {key}. Press Enter without typing anything to stop.")
                values = []
                while True:
                    item = input(f"Add a value to {key}: ").strip()
                    if item:
                        values.append(item)
                    else:
                        pattern[key] = values
                        break
        else:
            if value:
                print(f"Please provide {key} (or press Enter to keep the default value '{value}'): ")
                pattern[key] = input(f"{key}: ").strip() or value
            else:
                pattern[key] = input(f"Please provide {key}: ").strip()
    return pattern

def main():
    
    print("You will be asked to select schema type.")
    print("Please select from the following options:")
    for i, schema in enumerate(schemas, 1):
        print(f"{i}. {schema['@type']}")
    choice = int(input("Select an option (number): ")) - 1

    pattern_data = ask_questions(schemas[choice])

    print("Here is your completed schema.org data:")
    print(json.dumps(pattern_data, indent=4))


    if 'name' in pattern_data and '@type' in pattern_data:
        filename = f"{pattern_data['name']}.{pattern_data['@type']}.jsonld"
    elif '@type' in pattern_data:
        filename = f"{pattern_data['@type']}.jsonld"
    else:
        filename = "schema.org.jsonld"

    # save file as jsonld
    with open(filename, "w") as f:
        json.dump(pattern_data, f, indent=4)

if __name__ == "__main__":
    main()

error example:
PS C:\rohhs\scripts\python\.named\sdm> & C:/Users/rohht/AppData/Local/Programs/Python/Python312/python.exe c:/rohhs/scripts/python/.named/sdm/input/person.schema.py
You will be asked to select schema type.
Please select from the following options:
1. Person
2. LocalBusiness
3. Organization
4. Product
5. Offer
Select an option (number): 5
Please select a availability from the following options:
1. https://schema.org/InStock
2. https://schema.org/OutOfStock
3. https://schema.org/PreOrder
4. https://schema.org/BackOrder
5. https://schema.org/InStoreOnly
6. https://schema.org/OnlineOnly
Select an option (number): 1
Please provide price: 100
Please provide priceCurrency: usd
Please provide url: oo
Do you want to add items to warranty? (yes/no): y
Adding items to warranty.
Please provide durationOfWarranty: 1
Do you want to add another item? (yes/no): n
warranty:
1. {'@context': 'https://schema.org', '@type': 'WarrantyPromise', 'durationOfWarranty': '1'}
Do you want to keep the list? (yes/no): y
Traceback (most recent call last):
  File "c:\rohhs\scripts\python\.named\sdm\input\person.schema.py", line 230, in <module>
    main()
  File "c:\rohhs\scripts\python\.named\sdm\input\person.schema.py", line 212, in main
    pattern_data = ask_questions(schemas[choice])
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "c:\rohhs\scripts\python\.named\sdm\input\person.schema.py", line 133, in ask_questions
    for key, value in pattern.items():
RuntimeError: dictionary changed size during iteration